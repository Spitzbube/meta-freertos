diff --git a/Core/Src/main.c b/Core/Src/main.c
index b0349d4..f3610f3 100644
--- a/vistron_vdr_400/Core/Src/main.c
+++ b/vistron_vdr_400/Core/Src/main.c
@@ -22,10 +22,18 @@
 
 /* Private includes ----------------------------------------------------------*/
 /* USER CODE BEGIN Includes */
+#ifdef FREERTOS
+
+#include "FreeRTOS.h"
+#include "task.h"
+
+#else
 
 #include "../../User/func_8001ae8.h"
 #include <stdlib.h>
 
+#endif
+
 /* USER CODE END Includes */
 
 /* Private typedef -----------------------------------------------------------*/
@@ -80,6 +88,47 @@ extern int sub_800a9a8(void);
 /* Private user code ---------------------------------------------------------*/
 /* USER CODE BEGIN 0 */
 
+#ifdef FREERTOS
+
+#define LED_TASK_STACK_SIZE 256
+void LED1_Task(void* p)
+{
+    // PE5 = Output for LED D2
+    GPIO_InitTypeDef GPIO_InitStruct = {0};
+    GPIO_InitStruct.Pin = GPIO_PIN_5;
+    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
+    GPIO_InitStruct.Pull = GPIO_NOPULL;
+    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
+    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
+	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
+
+	while (1)
+	{
+	    vTaskDelay(pdMS_TO_TICKS(250));
+		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
+	}
+}
+
+void LED2_Task(void* p)
+{
+    // PE6 = Output for LED D3
+    GPIO_InitTypeDef GPIO_InitStruct = {0};
+    GPIO_InitStruct.Pin = GPIO_PIN_6;
+    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
+    GPIO_InitStruct.Pull = GPIO_NOPULL;
+    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
+    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
+	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
+
+	while (1)
+	{
+	    vTaskDelay(pdMS_TO_TICKS(500));
+		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
+	}
+}
+
+#else
+
 /* 800c7e0 - todo */
 void sub_800c7e0(uint16_t a)
 {
@@ -324,6 +373,7 @@ void draw_signal_strength_bars(uint16_t r7_6, uint16_t r7_4, int8_t* r7)
    //loc_8001eae
 }
 
+#endif
 
 /* USER CODE END 0 */
 
@@ -335,11 +385,15 @@ int main(void)
 {
   /* USER CODE BEGIN 1 */
 
+#ifndef FREERTOS
+	
   struct_8008d84* r7_c = (wMainloopEvents & 4)? FavouriteList: ChannelList;
   uint16_t standbyCounter = 10800;
   uint8_t r7_9;
   struct_8008d84_Inner8 r7; //???
 
+#endif
+  
   /* USER CODE END 1 */
 
   /* MCU Configuration--------------------------------------------------------*/
@@ -356,6 +410,24 @@ int main(void)
 
   /* USER CODE BEGIN SysInit */
 
+#ifdef FREERTOS
+
+  __HAL_RCC_GPIOE_CLK_ENABLE();
+
+  TaskHandle_t led1Task;
+  (void) xTaskCreate( LED1_Task, "LED1", LED_TASK_STACK_SIZE,
+  		NULL/*pvParameters*/, 1/*uxPriority*/, &led1Task);
+
+#if 0
+  TaskHandle_t led2Task;
+  (void) xTaskCreate( LED2_Task, "LED2", LED_TASK_STACK_SIZE,
+  		NULL/*pvParameters*/, 1/*uxPriority*/, &led2Task);
+#endif
+
+  vTaskStartScheduler();  // should never return
+  
+#else
+  
   /* USER CODE END SysInit */
 
   /* Initialize all configured peripherals */
@@ -827,6 +899,9 @@ int main(void)
 
     /* USER CODE BEGIN 3 */
   }
+  
+#endif
+
   /* USER CODE END 3 */
 }
 
@@ -875,6 +950,8 @@ void SystemClock_Config(void)
   }
 }
 
+#ifndef FREERTOS
+
 /**
   * @brief I2C2 Initialization Function
   * @param None
@@ -1296,6 +1373,8 @@ static void MX_FSMC_Init(void)
 
 /* USER CODE BEGIN 4 */
 
+#endif
+
 /* USER CODE END 4 */
 
 /**
